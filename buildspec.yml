# version: 0.2

# env:
#   variables:
#     IMAGE_REPO_NAME: "devops-app-repo"
#     IMAGE_TAG: "latest"
#     AWS_REGION: "us-east-1"

# phases:
#   pre_build:
#     commands:
#       - set -e
#       - echo Logging in to Amazon ECR...
#       - ACCOUNT_ID=$(aws sts get-caller-identity --query account --output text)
#       - echo "Account ID is $ACCOUNT_ID"
#       - REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME
#       - echo "ECR Repo URI:$REPOSITORY_URI"
#       - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI

#       - echo Making Python scripts executable...
#       - chmod +x scripts/*.py

#       - echo Installing Terraform...
#       - curl -LO https://releases.hashicorp.com/terraform/1.8.5/terraform_1.8.5_linux_amd64.zip
#       - unzip terraform_1.8.5_linux_amd64.zip
#       - mv terraform /usr/local/bin/
#       - terraform version

#   build:
#     commands:
#       - echo Building Docker image...
#       - docker build -t $IMAGE_REPO_NAME ./flask_web_app/app
#       - "docker tag $IMAGE_REPO_NAME:latest $REPOSITORY_URI:$IMAGE_TAG"
#       - echo Pushing Docker image to ECR...
#       - "docker push $REPOSITORY_URI:$IMAGE_TAG"

#       - echo Running Terraform to provision/update infrastructure...
#       - cd terraform
#       - terraform init
#       - terraform apply -auto-approve

#   post_build:
#     commands:
#       - echo Build completed on `date`

# artifacts:
#   files:
#     - appspec.yml
#     - scripts/**/*

#working
# version: 0.2

# env:
#   variables:
#     IMAGE_REPO_NAME: "devops-app-repo"
#     IMAGE_TAG: "latest"
#     AWS_REGION: "us-east-1"

# phases:
#   install:
#     runtime-versions:
#       python: 3.9
#   pre_build:
#     commands:
#       - set -e
#       - echo "=== DEBUGGING AWS CREDENTIALS ==="
#       - echo "AWS CLI version:"
#       - aws --version
#       - echo "AWS Region:$AWS_REGION"
#       - echo "Checking AWS credentials..."
#       - aws sts get-caller-identity || echo "STS call failed"
#       - echo "Full STS response:"
#       - aws sts get-caller-identity --output json || echo "STS JSON call failed"
#       - echo "=== END DEBUGGING ==="
      
#       - echo Logging in to Amazon ECR...
#       - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
#       - echo "Account ID is $ACCOUNT_ID"
#       - |
#         if [ "$ACCOUNT_ID" = "None" ] || [ -z "$ACCOUNT_ID" ]; then
#           echo "ERROR: Failed to get Account ID"
#           exit 1
#         fi
#       - REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME
#       - echo "ECR Repo URI:$REPOSITORY_URI"
#       - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI

#       - echo Making Python scripts executable...
#       - chmod +x scripts/*.py

#       - echo Installing Terraform...
#       - curl -LO https://releases.hashicorp.com/terraform/1.8.5/terraform_1.8.5_linux_amd64.zip
#       - unzip terraform_1.8.5_linux_amd64.zip
#       - mv terraform /usr/local/bin/
#       - terraform version

#   build:
#     commands:
#       - echo Building Docker image...
#       - docker build -t $IMAGE_REPO_NAME ./flask_web_app/app
#       - "docker tag $IMAGE_REPO_NAME:latest $REPOSITORY_URI:$IMAGE_TAG"
#       - echo Pushing Docker image to ECR...
#       - "docker push $REPOSITORY_URI:$IMAGE_TAG"

#       - echo Running Terraform to provision/update infrastructure...
#       - cd terraform
#       - terraform init
#       - terraform apply -auto-approve

#   post_build:
#     commands:
#       - echo Build completed on `date`

# artifacts:
#   files:
#     - appspec.yml
#     - scripts/**/*


#most working
# version: 0.2

# env:
#   variables:
#     IMAGE_REPO_NAME: "devops-app-repo"
#     IMAGE_TAG: "latest"
#     AWS_REGION: "us-east-1"

# phases:
#   install:
#     runtime-versions:
#       python: 3.9
#   pre_build:
#     commands:
#       - set -e
#       - echo "=== DEBUGGING AWS CREDENTIALS ==="
#       - echo "AWS CLI version:"
#       - aws --version
#       - echo "AWS Region:$AWS_REGION"
#       - echo "Checking AWS credentials..."
#       - aws sts get-caller-identity || echo "STS call failed"
#       - echo "Full STS response:"
#       - aws sts get-caller-identity --output json || echo "STS JSON call failed"
#       - echo "=== END DEBUGGING ==="
      
#       - echo Logging in to Amazon ECR...
#       - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
#       - echo "Account ID is $ACCOUNT_ID"
#       - |
#         if [ "$ACCOUNT_ID" = "None" ] || [ -z "$ACCOUNT_ID" ]; then
#           echo "ERROR: Failed to get Account ID"
#           exit 1
#         fi
#       - REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME
#       - echo "ECR Repo URI:$REPOSITORY_URI"
#       - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI

#       - echo Making Python scripts executable...
#       - chmod +x scripts/*.py

#       - echo Installing Terraform...
#       - rm -rf terraform terraform_1.8.5_linux_amd64.zip
#       - curl -LO https://releases.hashicorp.com/terraform/1.8.5/terraform_1.8.5_linux_amd64.zip
#       - unzip -o terraform_1.8.5_linux_amd64.zip
#       - mv terraform /usr/local/bin/
#       - terraform version

#   build:
#     commands:
#       - echo Building Docker image...
#       - docker build -t $IMAGE_REPO_NAME ./flask_web_app/app
#       - "docker tag $IMAGE_REPO_NAME:latest $REPOSITORY_URI:$IMAGE_TAG"
#       - echo Pushing Docker image to ECR...
#       - "docker push $REPOSITORY_URI:$IMAGE_TAG"

#       - echo Running Terraform to provision/update infrastructure...
#       - cd terraform
#       - terraform init
#       - terraform apply -auto-approve

#   post_build:
#     commands:
#       - echo Build completed on `date`

# artifacts:
#   files:
#     - appspec.yml
#     - scripts/**/*

#terraform folder present in this
# version: 0.2

# env:
#   variables:
#     IMAGE_REPO_NAME: "devops-app-repo"
#     IMAGE_TAG: "latest"
#     AWS_REGION: "us-east-1"

# phases:
#   install:
#     runtime-versions:
#       python: 3.9
#   pre_build:
#     commands:
#       - set -e
#       - echo "=== DEBUGGING AWS CREDENTIALS ==="
#       - echo "AWS CLI version:"
#       - aws --version
#       - echo "AWS Region:$AWS_REGION"
#       - echo "Checking AWS credentials..."
#       - aws sts get-caller-identity || echo "STS call failed"
#       - echo "Full STS response:"
#       - aws sts get-caller-identity --output json || echo "STS JSON call failed"
#       - echo "=== END DEBUGGING ==="
      
#       - echo Logging in to Amazon ECR...
#       - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
#       - echo "Account ID is $ACCOUNT_ID"
#       - |
#         if [ "$ACCOUNT_ID" = "None" ] || [ -z "$ACCOUNT_ID" ]; then
#           echo "ERROR: Failed to get Account ID"
#           exit 1
#         fi
#       - REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME
#       - echo "ECR Repo URI:$REPOSITORY_URI"
#       - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI

#       - echo Making Python scripts executable...
#       - chmod +x scripts/*.py

#       - echo Installing Terraform...
#       - rm -rf terraform_1.8.5_linux_amd64.zip
#       - curl -LO https://releases.hashicorp.com/terraform/1.8.5/terraform_1.8.5_linux_amd64.zip
#       - mkdir -p /tmp/terraform_install
#       - unzip -o terraform_1.8.5_linux_amd64.zip -d /tmp/terraform_install
#       - chmod +x /tmp/terraform_install/terraform
#       - mv /tmp/terraform_install/terraform /usr/local/bin/
#       - terraform version

#   build:
#     commands:
#       - echo "=== COMPLETE SOURCE DEBUGGING ==="
#       - pwd
#       - echo "=== ROOT DIRECTORY CONTENTS ==="
#       - ls -la
#       - echo "=== COMPLETE DIRECTORY TREE ==="
#       - find . -type d | sort
#       - echo "=== ALL FILES IN PROJECT ==="
#       - find . -type f | sort
#       - echo "=== TERRAFORM FILES SPECIFICALLY ==="
#       - find . -name "*.tf" 2>/dev/null || echo "No .tf files found"
#       - echo "=== CHECK IF TERRAFORM DIR EXISTS ==="
#       - if [ -d "terraform" ]; then
#           echo "terraform directory EXISTS"
#           ls -la terraform/
#           if [ -d "terraform/modules" ]; then
#             echo "modules directory exists"
#             find terraform/modules -type f
#           else
#             echo "No modules directory found"
#           fi
#         else
#           echo "terraform directory DOES NOT EXIST"
#         fi
#       - echo "=== END SOURCE DEBUGGING ==="

#       - echo Building Docker image...
#       - docker build -t $IMAGE_REPO_NAME ./flask_web_app/app
#       - "docker tag $IMAGE_REPO_NAME:latest $REPOSITORY_URI:$IMAGE_TAG"
#       - echo Pushing Docker image to ECR...
#       - "docker push $REPOSITORY_URI:$IMAGE_TAG"

#       - echo Running Terraform to provision/update infrastructure...
#       - if [ -d "terraform" ]; then
#           cd terraform
#           terraform init
#           terraform apply -auto-approve
#         else
#           echo "ERROR:terraform directory not found, skipping terraform commands"
#           exit 1
#         fi

#   post_build:
#     commands:
#       - echo Build completed on `date`

# artifacts:
#   files:
#     - appspec.yml
#     - scripts/**/*


version: 0.2

env:
  variables:
    IMAGE_REPO_NAME: "devops-app-repo"
    IMAGE_TAG: "latest"
    AWS_REGION: "us-east-1"

phases:
  install:
    runtime-versions:
      python: 3.9
  pre_build:
    commands:
      - set -e
      - echo Logging in to Amazon ECR...
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - echo "Account ID is $ACCOUNT_ID"
      - |
        if [ "$ACCOUNT_ID" = "None" ] || [ -z "$ACCOUNT_ID" ]; then
          echo "ERROR: Failed to get Account ID"
          exit 1
        fi
      - REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - echo "ECR Repo URI:$REPOSITORY_URI"
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI

      - echo Making Python scripts executable...
      - chmod +x scripts/*.py

      - echo Installing Terraform...
      - rm -rf terraform_1.8.5_linux_amd64.zip
      - curl -LO https://releases.hashicorp.com/terraform/1.8.5/terraform_1.8.5_linux_amd64.zip
      - mkdir -p /tmp/terraform_install
      - unzip -o terraform_1.8.5_linux_amd64.zip -d /tmp/terraform_install
      - chmod +x /tmp/terraform_install/terraform
      - mv /tmp/terraform_install/terraform /usr/local/bin/
      - terraform version

  build:
    commands:
      - echo Building Docker image...
      - docker build -t $IMAGE_REPO_NAME ./flask_web_app/app
      - "docker tag $IMAGE_REPO_NAME:latest $REPOSITORY_URI:$IMAGE_TAG"
      - echo Pushing Docker image to ECR...
      - "docker push $REPOSITORY_URI:$IMAGE_TAG"

      - echo Running Terraform to provision/update infrastructure...
      - cd terraform
      - terraform init
      - terraform apply -auto-approve

  post_build:
    commands:
      - echo Build completed on `date`

artifacts:
  files:
    - appspec.yml
    - scripts/**/*